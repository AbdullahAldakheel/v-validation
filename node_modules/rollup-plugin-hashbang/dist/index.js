'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fs = _interopDefault(require('fs'));
var path = _interopDefault(require('path'));
var MagicString = _interopDefault(require('magic-string'));

function _async(f) {
  return function () {
    for (var args = [], i = 0; i < arguments.length; i++) {
      args[i] = arguments[i];
    }

    try {
      return Promise.resolve(f.apply(this, args));
    } catch (e) {
      return Promise.reject(e);
    }
  };
}

function _awaitIgnored(value, direct) {
  if (!direct) {
    return value && value.then ? value.then(_empty) : Promise.resolve();
  }
}

function _empty() {}

const pify = fn => (...args) => new Promise((resolve, reject) => fn(...args, (err, result) => {
  return err ? reject(err) : resolve(result);
}));

var index = (() => {
  const chmod = pify(fs.chmod);
  const shebangs = new Map();
  const shebangRe = /^\s*(#!.*)/;
  const outputFiles = new Set();
  return {
    name: 'hashbang',

    transform(code, id) {
      let match; // eslint-disable-next-line no-cond-assign

      if (match = shebangRe.exec(code)) {
        shebangs.set(id, match[1]);
        const str = new MagicString(code);
        str.remove(match.index, match[1].length);
        return {
          code: str.toString(),
          map: str.generateMap({
            hires: true
          })
        };
      }

      return null;
    },

    renderChunk(code, {
      isEntry,
      facadeModuleId,
      fileName
    }, {
      file,
      dir
    }) {
      if (!isEntry || !shebangs.has(facadeModuleId)) return;
      outputFiles.add(file || path.resolve(dir, fileName));
      const res = {};
      const str = new MagicString(code);
      str.prepend(shebangs.get(facadeModuleId) + '\n');
      res.code = str.toString();
      res.map = str.generateMap({
        hires: true
      });
      return res;
    },

    writeBundle: _async(function () {
      return _awaitIgnored(Promise.all([...outputFiles].map(_async(function (file) {
        return _awaitIgnored(chmod(file, 0o755 & ~process.umask()));
      }))));
    })
  };
});

module.exports = index;
